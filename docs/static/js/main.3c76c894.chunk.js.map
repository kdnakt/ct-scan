{"version":3,"sources":["components/AppFooter.tsx","components/AppHeader.tsx","components/AppImage.tsx","components/quiz/QuizMode.ts","components/quiz/QuizData.ts","components/quiz/QuizForm.tsx","components/quiz/QuizMain.tsx","components/quiz/QuizSelector.tsx","components/AppMain.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppFooter","_jsxs","className","children","_jsx","href","AppHeader","style","textAlign","packageJson","version","AppImage","alt","src","QuizModes","label","maxHeadCount","random","min","max","Math","trunc","calcTotalHeadCount","data","craneCount","turtleCount","calcTotalLegCount","createQuizData","mode","total","floor","crane","QuizForm","_ref","setQuiz","quiz","_useState","useState","_useState2","_slicedToArray","setCrane","_useState3","_useState4","turtle","setTurtle","_useState5","_useState6","disabled","setDisabled","_Fragment","type","value","onChange","e","newCrane","Number","target","newTurtle","onClick","window","alert","QuizMain","ModeLabel","selected","_QuizModes$mode","concat","confirm","QuizSelector","_ref2","current","Object","keys","map","AppMain","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c76c894.chunk.js","sourcesContent":["\nexport const AppFooter = () => {\n    return (\n        <footer className=\"app_footer\" >\n            &copy;&nbsp;2023&nbsp;\n            <a href=\"https://twitter.com/kdnakt\">kdnakt</a>\n        </footer>\n    )\n}","import packageJson from '../../package.json'\n\nexport const AppHeader = () => {\n    return (\n        <h1 style={{textAlign: 'center'}}>\n            „Å§„Çã„Åã„ÇÅ„Åñ„Çì v{packageJson.version}\n        </h1>\n    )\n}","\nexport const AppImage = () => {\n    return (\n        <h4 style={{textAlign: 'center'}}>\n            <img alt=\"Crane and Turtle\"\n                className=\"app_image\"\n                src=\"ct.png\" />\n        </h4>\n    )\n}","\nexport const QuizModes = {\n    \"easy\": {\n        label: \"„Åã„Çì„Åü„Çì\",\n        maxHeadCount: 5,\n        style: \"bg-info text-white\",\n    },\n    \"normal\": {\n        label: \"„Åµ„Å§„ÅÜ\",\n        maxHeadCount: 15,\n        style: \"bg-primary text-white\",\n    },\n    \"hard\": {\n        label: \"„ÇÄ„Åö„Åã„Åó„ÅÑ\",\n        maxHeadCount: 100,\n        style: \"bg-warning text-dark\",\n    },\n} as const\n\nexport type QuizMode = keyof typeof QuizModes\n","import { QuizMode, QuizModes } from \"./QuizMode\";\n\nexport function random(min: number, max: number): number {\n    return Math.trunc(Math.random() * (max - min)) + min;\n}\n\nexport type QuizData = {\n    craneCount: number,\n    turtleCount: number,\n}\n\nexport function calcTotalHeadCount(data: QuizData): number {\n    return data.craneCount + data.turtleCount\n}\n\nexport function calcTotalLegCount(data: QuizData): number {\n    return data.craneCount * 2 + data.turtleCount * 4\n}\n\nexport function createQuizData(mode: QuizMode): QuizData {\n    const max = QuizModes[mode].maxHeadCount\n    const total = random(Math.floor(max / 3), max)\n    const crane = random(1, total)\n    const turtle = total - crane\n    return {\n        craneCount: crane,\n        turtleCount: turtle,\n    }\n}\n","import { Dispatch, FC, SetStateAction, useState } from \"react\";\nimport { Quiz } from \"./Quiz\";\nimport { calcTotalHeadCount, createQuizData } from \"./QuizData\";\n\n\ntype Props = {\n    setQuiz: Dispatch<SetStateAction<Quiz>>,\n    quiz: Quiz,\n}\n\nexport const QuizForm: FC<Props> = ({\n    setQuiz,\n    quiz,\n}) => {\n    const data = quiz.data\n    const total = calcTotalHeadCount(data)\n    const [crane, setCrane] = useState(0)\n    const [turtle, setTurtle] = useState(0)\n    const [disabled, setDisabled] = useState(true);\n    return (\n        <>\n            <span className=\"answer_label\">„Å§„Çã</span>\n            <input className=\"answer_input\" type=\"number\" value={crane}\n                data-testid=\"crane-input\"\n                max={total} min={0}\n                onChange={e => {\n                    const newCrane = Number(e.target.value)\n                    setCrane(newCrane)\n                    setDisabled(newCrane === 0 && turtle === 0)\n                }}\n            />\n            <br />\n            <span className=\"answer_label\">„Åã„ÇÅ</span>\n            <input className=\"answer_input\" type=\"number\" value={turtle}\n                data-testid=\"turtle-input\"\n                max={total} min={0}\n                onChange={e => {\n                    const newTurtle = Number(e.target.value)\n                    setTurtle(newTurtle)\n                    setDisabled(crane === 0 && newTurtle === 0)\n                }}\n            />\n            <br />\n            <button className=\"answer_button bg-primary text-white\" data-testid=\"submit-button\"\n                    disabled={disabled}\n                    style={disabled ? {\"cursor\": \"not-allowed\", \"opacity\": 0.5} : {}}\n                    onClick={() => {\n                const isOk = crane === data.craneCount && turtle === data.turtleCount\n                if (isOk) {\n                    window.alert(\"„Åõ„ÅÑ„Åã„ÅÑüéâ\\n„Åä„ÇÅ„Åß„Å®„ÅÜÔºÅ\")\n                    setQuiz({\n                        mode: quiz.mode,\n                        data: createQuizData(quiz.mode)\n                    })\n                    setCrane(0)\n                    setTurtle(0)\n                } else {\n                    window.alert(\"„Åñ„Çì„Å≠„Çìüò±\\n„ÇÇ„ÅÜ„ÅÑ„Å°„Å© „Åã„Çì„Åå„Åà„Çà„ÅÜ\")\n                }\n            }}>„Åì„Åü„Åà„ÅÇ„Çè„Åõ</button>\n        </>\n    )\n}","import { FC } from \"react\"\nimport { Quiz } from \"./Quiz\"\nimport { calcTotalHeadCount, calcTotalLegCount } from \"./QuizData\"\nimport { QuizModes } from \"./QuizMode\"\n\nexport const QuizMain: FC<{quiz: Quiz}> = ({\n    quiz,\n}) => {\n    const { mode, data } = quiz\n    const label = QuizModes[mode].label\n    return (\n        <>\n            <h5 style={{textAlign: 'center'}}>\n                <span>„É¢„Éº„ÉâÔºö{label}</span>\n            </h5>\n            <h3 style={{textAlign: 'center'}}>\n                <span>„Å§„Çã&nbsp;„Å®&nbsp;„Åã„ÇÅ&nbsp;„Åå&nbsp;„Åú„Çì„Å∂„Åß&nbsp;</span>\n                <span data-testid=\"total-heads\">{calcTotalHeadCount(data)}</span>\n                <span>&nbsp;„Å≤„Åç</span>\n            </h3>\n            <h3 style={{textAlign: 'center'}}>\n                <span>„ÅÇ„Åó„Åå&nbsp;„Åú„Çì„Å∂„Åß&nbsp;</span>\n                <span data-testid=\"total-legs\">{calcTotalLegCount(data)}</span>\n                <span>&nbsp;„Åª„Çì</span>\n            </h3>\n            <h3 style={{textAlign: 'center'}}>\n                „Å§„Çã&nbsp;„Å®&nbsp;„Åã„ÇÅ&nbsp;„ÅØ&nbsp;„Åù„Çå„Åû„Çå&nbsp;„Å™„Çì„Å≤„ÅçÔºü\n            </h3>\n        </>\n    )\n}","import { Dispatch, FC, SetStateAction } from \"react\"\nimport { Quiz } from \"./Quiz\"\nimport { createQuizData } from \"./QuizData\"\nimport { QuizMode, QuizModes } from \"./QuizMode\"\n\ntype SelectorProps = {\n    setQuiz: Dispatch<SetStateAction<Quiz>>,\n    current: Quiz,\n}\n\ntype ModeProps = {\n    setQuiz: Dispatch<SetStateAction<Quiz>>,\n    mode: QuizMode,\n    selected: boolean,\n}\n\nexport const ModeLabel: FC<ModeProps> = ({\n    setQuiz,\n    mode,\n    selected,\n}) => {\n    const { label, style } = QuizModes[mode]\n    return (\n        <span className={`quiz_mode quiz_mode_${selected ? \"selected\" : mode} ${style}`}\n            style={selected ? {\"cursor\": \"not-allowed\"} : {}}\n            onClick={() => {\n                if (!selected && window.confirm(`„Äå${label}„Äç„É¢„Éº„Éâ„Å´\\n„Åã„Åà„Åæ„Åô„ÅãÔºü`)) {\n                    const data = createQuizData(mode)\n                    setQuiz({\n                        mode: mode,\n                        data: data\n                    })\n                }\n            }}\n        >\n            {label}\n        </span>\n    )\n}\n\nexport const QuizSelector: FC<SelectorProps> = ({\n    setQuiz,\n    current,\n}) => {\n    return (\n        <>\n            <h5 style={{textAlign: 'center'}}>\n                {Object.keys(QuizModes).map(mode => \n                    <ModeLabel key={mode}\n                        setQuiz={setQuiz}\n                        mode={mode as QuizMode} \n                        selected={current.mode === mode}\n                    />\n                )}\n            </h5>\n        </>\n    )\n}","import { useState } from \"react\"\nimport { Quiz } from \"./quiz/Quiz\"\nimport { createQuizData } from \"./quiz/QuizData\"\nimport { QuizForm } from \"./quiz/QuizForm\"\nimport { QuizMain } from \"./quiz/QuizMain\"\nimport { QuizSelector } from \"./quiz/QuizSelector\"\n\nexport const AppMain = () => {\n    const [quiz, setQuiz] = useState<Quiz>({mode: \"normal\", data: createQuizData(\"normal\")})\n    return (\n        <>\n            <QuizSelector setQuiz={setQuiz} current={quiz} />\n            <QuizMain quiz={quiz} />\n            <QuizForm quiz={quiz} setQuiz={setQuiz} />\n        </>\n    )\n}","import React from 'react';\nimport './App.css';\nimport { AppFooter } from './components/AppFooter';\nimport { AppHeader } from './components/AppHeader';\nimport { AppImage } from './components/AppImage';\nimport { AppMain } from './components/AppMain';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <AppMain />\n      <AppImage />\n      <AppFooter />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}