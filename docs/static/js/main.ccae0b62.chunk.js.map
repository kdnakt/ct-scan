{"version":3,"sources":["components/AppFooter.tsx","components/AppHeader.tsx","components/AppImage.tsx","components/quiz/QuizMode.ts","components/quiz/QuizData.ts","components/quiz/QuizForm.tsx","components/quiz/QuizMain.tsx","components/quiz/QuizSelector.tsx","components/AppMain.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppFooter","className","href","AppHeader","style","textAlign","AppImage","alt","src","QuizModes","label","maxHeadCount","random","min","max","Math","trunc","calcTotalHeadCount","data","craneCount","turtleCount","calcTotalLegCount","createQuizData","mode","total","floor","crane","QuizForm","setQuiz","quiz","useState","setCrane","turtle","setTurtle","disabled","setDisabled","type","value","data-testid","onChange","e","newCrane","Number","target","newTurtle","onClick","window","alert","QuizMain","ModeLabel","selected","confirm","QuizSelector","current","Object","keys","map","AppMain","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ccae0b62.chunk.js","sourcesContent":["\nexport const AppFooter = () => {\n    return (\n        <footer className=\"app_footer\" >\n            &copy;&nbsp;2021&nbsp;\n            <a href=\"https://twitter.com/kdnakt\">kdnakt</a>\n        </footer>\n    )\n}","\nexport const AppHeader = () => {\n    return (\n        <h1 style={{textAlign: 'center'}}>\n            „Å§„Çã„Åã„ÇÅ„Åñ„Çì\n        </h1>\n    )\n}","\nexport const AppImage = () => {\n    return (\n        <h4 style={{textAlign: 'center'}}>\n            <img alt=\"Crane and Turtle\"\n                className=\"app_image\"\n                src=\"ct.png\" />\n        </h4>\n    )\n}","\nexport const QuizModes = {\n    \"easy\": {\n        label: \"„Åã„Çì„Åü„Çì\",\n        maxHeadCount: 5,\n    },\n    \"normal\": {\n        label: \"„Åµ„Å§„ÅÜ\",\n        maxHeadCount: 15,\n    },\n    \"hard\": {\n        label: \"„ÇÄ„Åö„Åã„Åó„ÅÑ\",\n        maxHeadCount: 100,\n    },\n} as const\n\nexport type QuizMode = keyof typeof QuizModes\n","import { QuizMode, QuizModes } from \"./QuizMode\";\n\nexport function random(min: number, max: number): number {\n    return Math.trunc(Math.random() * (max - min)) + min;\n}\n\nexport type QuizData = {\n    craneCount: number,\n    turtleCount: number,\n}\n\nexport function calcTotalHeadCount(data: QuizData): number {\n    return data.craneCount + data.turtleCount\n}\n\nexport function calcTotalLegCount(data: QuizData): number {\n    return data.craneCount * 2 + data.turtleCount * 4\n}\n\nexport function createQuizData(mode: QuizMode): QuizData {\n    const max = QuizModes[mode].maxHeadCount\n    const total = random(Math.floor(max / 3), max)\n    const crane = random(1, total)\n    const turtle = total - crane\n    return {\n        craneCount: crane,\n        turtleCount: turtle,\n    }\n}\n","import { Dispatch, FC, SetStateAction, useState } from \"react\";\nimport { Quiz } from \"./Quiz\";\nimport { calcTotalHeadCount, createQuizData } from \"./QuizData\";\n\n\ntype Props = {\n    setQuiz: Dispatch<SetStateAction<Quiz>>,\n    quiz: Quiz,\n}\n\nexport const QuizForm: FC<Props> = ({\n    setQuiz,\n    quiz,\n}) => {\n    const data = quiz.data\n    const total = calcTotalHeadCount(data)\n    const [crane, setCrane] = useState(0)\n    const [turtle, setTurtle] = useState(0)\n    const [disabled, setDisabled] = useState(true);\n    return (\n        <>\n            <span className=\"answer_label\">„Å§„Çã</span>\n            <input className=\"answer_input\" type=\"number\" value={crane}\n                data-testid=\"crane-input\"\n                max={total} min={0}\n                onChange={e => {\n                    const newCrane = Number(e.target.value)\n                    setCrane(newCrane)\n                    setDisabled(newCrane === 0 && turtle === 0)\n                }}\n            />\n            <br />\n            <span className=\"answer_label\">„Åã„ÇÅ</span>\n            <input className=\"answer_input\" type=\"number\" value={turtle}\n                data-testid=\"turtle-input\"\n                max={total} min={0}\n                onChange={e => {\n                    const newTurtle = Number(e.target.value)\n                    setTurtle(newTurtle)\n                    setDisabled(crane === 0 && newTurtle === 0)\n                }}\n            />\n            <br />\n            <span className=\"answer_hint\" data-testid=\"hint\">\n                {(quiz.mode === \"easy\" && (turtle + crane !== total))\n                    ? `„Éí„É≥„ÉàÔºö„Åú„Çì„Å∂„Åß${total}„Å≤„Åç` : ``\n                }\n            </span>\n            <br />\n            <button className=\"answer_button\" data-testid=\"submit-button\"\n                    disabled={disabled}\n                    onClick={() => {\n                const isOk = crane === data.craneCount && turtle === data.turtleCount\n                if (isOk) {\n                    window.alert(\"„Åõ„ÅÑ„Åã„ÅÑüéâ\\n„Åä„ÇÅ„Åß„Å®„ÅÜÔºÅ\")\n                    setQuiz({\n                        mode: quiz.mode,\n                        data: createQuizData(quiz.mode)\n                    })\n                    setCrane(0)\n                    setTurtle(0)\n                } else {\n                    window.alert(\"„Åñ„Çì„Å≠„Çìüò±\\n„ÇÇ„ÅÜ„ÅÑ„Å°„Å© „Åã„Çì„Åå„Åà„Çà„ÅÜ\")\n                }\n            }}>„Åì„Åü„Åà„ÅÇ„Çè„Åõ</button>\n        </>\n    )\n}","import { FC } from \"react\"\nimport { Quiz } from \"./Quiz\"\nimport { calcTotalHeadCount, calcTotalLegCount } from \"./QuizData\"\n\nexport const QuizMain: FC<{quiz: Quiz}> = ({\n    quiz,\n}) => {\n    const data = quiz.data\n    return (\n        <>\n            <h3 style={{textAlign: 'center'}}>\n                <span>„Å§„Çã&nbsp;„Å®&nbsp;„Åã„ÇÅ&nbsp;„Åå&nbsp;„Åú„Çì„Å∂„Åß&nbsp;</span>\n                <span data-testid=\"total-heads\">{calcTotalHeadCount(data)}</span>\n                <span>&nbsp;„Å≤„Åç</span>\n            </h3>\n            <h3 style={{textAlign: 'center'}}>\n                <span>„ÅÇ„Åó„Åå&nbsp;„Åú„Çì„Å∂„Åß&nbsp;</span>\n                <span data-testid=\"total-legs\">{calcTotalLegCount(data)}</span>\n                <span>&nbsp;„Åª„Çì</span>\n            </h3>\n            <h3 style={{textAlign: 'center'}}>\n                „Å§„Çã&nbsp;„Å®&nbsp;„Åã„ÇÅ&nbsp;„ÅØ&nbsp;„Åù„Çå„Åû„Çå&nbsp;„Å™„Çì„Å≤„ÅçÔºü\n            </h3>\n        </>\n    )\n}","import { Dispatch, FC, SetStateAction } from \"react\"\nimport { Quiz } from \"./Quiz\"\nimport { createQuizData } from \"./QuizData\"\nimport { QuizMode, QuizModes } from \"./QuizMode\"\n\ntype SelectorProps = {\n    setQuiz: Dispatch<SetStateAction<Quiz>>,\n    current: Quiz,\n}\n\ntype ModeProps = {\n    setQuiz: Dispatch<SetStateAction<Quiz>>,\n    mode: QuizMode,\n    selected: boolean,\n}\n\nexport const ModeLabel: FC<ModeProps> = ({\n    setQuiz,\n    mode,\n    selected,\n}) => {\n    const label = QuizModes[mode].label\n    return (\n        <span className={`quiz_mode quiz_mode_${selected ? \"selected\" : mode}`}\n            onClick={() => {\n                if (!selected && window.confirm(`„Äå${label}„Äç„É¢„Éº„Éâ„Å´\\n„Åã„Åà„Åæ„Åô„ÅãÔºü`)) {\n                    const data = createQuizData(mode)\n                    setQuiz({\n                        mode: mode,\n                        data: data\n                    })\n                }\n            }}\n        >\n            {label}\n        </span>\n    )\n}\n\nexport const QuizSelector: FC<SelectorProps> = ({\n    setQuiz,\n    current,\n}) => {\n    return (\n        <>\n            <h5 style={{textAlign: 'center'}}>\n                {Object.keys(QuizModes).map(mode => \n                    <ModeLabel key={mode}\n                        setQuiz={setQuiz}\n                        mode={mode as QuizMode} \n                        selected={current.mode === mode}\n                    />\n                )}\n            </h5>\n        </>\n    )\n}","import { useState } from \"react\"\nimport { Quiz } from \"./quiz/Quiz\"\nimport { createQuizData } from \"./quiz/QuizData\"\nimport { QuizForm } from \"./quiz/QuizForm\"\nimport { QuizMain } from \"./quiz/QuizMain\"\nimport { QuizSelector } from \"./quiz/QuizSelector\"\n\nexport const AppMain = () => {\n    const [quiz, setQuiz] = useState<Quiz>({mode: \"normal\", data: createQuizData(\"normal\")})\n    return (\n        <>\n            <QuizSelector setQuiz={setQuiz} current={quiz} />\n            <QuizMain quiz={quiz} />\n            <QuizForm quiz={quiz} setQuiz={setQuiz} />\n        </>\n    )\n}","import React from 'react';\nimport './App.css';\nimport { AppFooter } from './components/AppFooter';\nimport { AppHeader } from './components/AppHeader';\nimport { AppImage } from './components/AppImage';\nimport { AppMain } from './components/AppMain';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <AppMain />\n      <AppImage />\n      <AppFooter />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}